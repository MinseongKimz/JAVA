*작성한날 : 2022.01.04
*작 성 자 : 김민성
*파일이름 : 2022-01-04.txt
*작성목적 : 수업내용 정리

오늘 배운 것 
1. 메모리와 자료형
2. 변수와 상수
3. 자료형의 변환
4. 연산자
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

1.변수를 선언 
자료형 + a 	 선언! > 다른곳에서 다른 의미로 쓰지마

데이터의 유형 + 크기 = 자료형

자바는 메모리의 직접적인 접근을 허용하지 않음. 
자료형  크기  데이터	표현가능 범위

byte	1byte 정수형 	-128 ~ 127
short	2byte 정수형 	-32768~32767
int	4byte 정수형 	+- ~21억
long	8byte 정수형	매우큼..

float	4byte 실수형 
double	8

char	2byte 문자형 	모든 유니코드 문자 포함
boolean	1byte 논리형	true false 


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
8bit = 1byte = 0~255

ex) IP Adress IPV4 = 32bit = 4byte 0.0.0.0 ~ 255.255.255.255

자바에서 8bit는 0~255 가 아니라 음수부터 시작함 . -128~127

0xxxxxxx -	1xxxxxxx
 0000000	 0000000
 1111111	 1111111
= 0 ~ 127	= -1 ~ -128

데이터에서  MSB 최상위비트 = 부호결정 


0	0 0 1 1 0 0 1 = 25
1	0 0 1 1 0 0 1 = ?? (-25는 아님)

만약 -25라면 두개를 더해보면 1 0110010 = 0이 아니다.


음의 정수 = 양수에서 2의 보수
음의 정수 표현 법

1) 1비트열 반전 (1의 보수)
ex) 0 0 0 1 1 0 0 1 = 25
	   ↓
    1 1 1 0 0 1 1 0 

2) 더하기 + 1 
    1 1 1 0 0 1 1 0 
+   0 0 0 0 0 0 0 1
--------------------
    1 1 1 0 0 1 1 1  = -25


25와 -25를 더해보면
0 0 0 1 1 0 0 1 
1 1 1 0 0 1 1 1
----------------
1 0 0 0 0 0 0 0 0  9bit 자리는 버림. = 0 


컴퓨터의 실수 표현

0.1 과 0.2 사이의 실수의 갯수...? = 무한대

어마어마한 메모리를 가져와도 정확히 표현 불가능

그래서 컴퓨터는 실수의 정밀도를 포기 


0~100까지 정수 형태 를 선언할려할 때 byte .. short... int..long...??

int 자바가 만들어 질때 컴퓨터들 *연산* 32bit 기반 .. 

그럼 byte, short 왜 만들었나.. 

저장용도로 쓸수 있다.. 1bit 짜리인데 int로 저장하면 낭비..

간장을 국그릇에 따른느낌.

그럼 실수에서는 float은 4byte, double은 8byte인데 왜 double 을 많이 쓸까??

실수에서 중요한건 정확도 때문.. float은 6자리, double은 15자리까지의 유효자리수(정밀도)를 가진다.


2.대입연산자 

a  = 10 
오른쪽 에서 왼쪽 10을 a 에 대입. 오른쪽 부터 보자.

연산자 우선순위에서 가장 낮음.

컴퓨터 입장에서 10을 먼저 메모리에 저장 이때 (int형 4byte), 그 후 a 에 메모리를 잡고 거기 10을 대입.

저장된 10은 가비지컬랙터 처리 대상.
 
ex) a= 3.14 

3.14를 먼저 메모리에 저장하는데 이때는 double 8byte 형으로 저장, 그후 a에 대입

int num = 10000000000;(100억) ㅡㅡㅡ> 에러 why? int 이기때문에..? (int 21억~)
---------
변수 선언
    -----------------
          변수 대입
------------------------- 선언과 대입이 같이 이뤄지면 변수 선언 및 초기화.



그럼 long num = 10000000000; ------> 이것도 에러 
변수 대입과정에서 정수는 int 형으로 저장
그래서 접미사로 L,l로 붙혀 줘야함

long num = 10000000000L;
float num = 3.14F; 더블형으로 저장되서 메모리 과다 그래서 float 으로 바꾸는 접미사.

그럼 byte a = 10; 이건 오류?? (short)
이건 아님, 저장될 때 byte 형변환됨.



3. 자료형의 반환

자료형의 변환 > 데이터 타입을 바꾼다 > 담겨있는 그릇을 바꾼다. 
WHY? 보관, 연산 

자동 형 변환 규칙
1byte   2byte   4byte  8byte    4byte    8byte
byte → short → int → long → float → double 
        char  ↗    

1) long > float 
long 은 8byte float 은 4byte 하지만 실수형은 long 보다 표현범위가 매우크다.

2)char 는 문자형이지만 실제 A = 63 같이 숫자로 저장되기 때문에 2byte short와 같은 위치에서 int 로 변형된다.


double num2 = 3.5f + 12; 이렇게 작성하면 12가 12f 로 자동 형변환.


명시적 형 변환 
()는 연산자 최 우선 

case1 자동 형변환의 규칙에 위배되지만 변환이 필요할 때 (데이터타입)

long num1 = 2147483648L; (21억 int 범위 안)
int num2 = (int)num1;

case2 
자동 형 변환 발생지의 위치를 알고 싶을때 

int num3 = 100;
long num4 = (long)num3


4.연산자 (Operator)

자바에서 제공하는 이항 연산자들

이항연산자란?
피연산자 연산자 피연산자  > 이항연산자

연산자 피연산자 > 단항연산자

피연산자 연산자 > 단항연산자

삼항 연산자
항1(피연산자) 연산자 항2(피연산자) 연산자 항3(피연산자)


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
느낀점 : 초반이긴 하지만 재미있음. 자료형같은 기초적인 부분을 잘 이해하자.

