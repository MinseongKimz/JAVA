2022-01-10
실행 흐름의 컨트롤(제어문)
지금까지 프로그램에 흐름에 따라서 우리가 코딩했다.
이젠 우리가 흐름을 제어해보자.


if 그리고 else (조건문, 분기문)
if(만약 ~라면)는 혼자 쓸 수 있다. 
하지만 else(그 이외)는 기준이 없다면 쓸 수 없다. 


if (조건) // 조건처리 결과 : true or false 
{
    //~실행문
}


if ~ else 는 하나의 문장 (아니라면 if 와 else 사이에 문장 들갈 수 있기 때문)

if(조건식)
{
   조건식이 true일때 실행
}
else if(다른조건)
{
 
}
else
{
   조건식이 false일때 실행
}


swich 와 case

switch(조건식)  // 조건처리 결과 : 상수 
{
   case1 : 처리문;
   case2 : 처리문;
   case3 : 처리문;
   default : 처리문4; ...> 조건식에 해당안되는 경우 실행		
}

케이스문은 실행 케이스부터 아래로 모든 케이스 실행.
break로 멈춰라~

switch(1+1)  
{
   case1 : 처리문;
   case2 : 처리문;      < 여기서부터 실행
   case3 : 처리문;      < 이것도 실행됨

}


switch(1+1)  
{
   case1 : 처리문;	break;
   case2 : 처리문;      break;
   case3 : 처리문;      break;

}


break : 멈춘다 (+ 그리고 빠져나간다)
continue : (뒷부분 무시하고 +) 계속해라 






※ 조건문 구성과정에서는 이외의 영역(else)을 
업무에 포함된 내용으로 처리하는 것은 바람직하지 않을 경우가 있다.
가급적이면 업무에 포함되지 않는 내용을
이외의 영역(else)에서 처리할 수 있도록 하자.


ex)
옛날에 휴대폰 011,019,018,017 이런 시절
if (앞자리 011)
else if (019)
else if (018)
else << 귀찮아서 017 을 이걸로 처리

이런식이면 나중에 010이 추가되면 017과 같은 처리기 때문에
곤란한 일이 일어날 수도 있다. 
가급적이면 업무 내용은 모두 포함시키는게 바람직 하다.















